import os
import re
import requests
import subprocess
import sys
import time
from oslo_config import cfg

main_opts = [
    cfg.IPOpt('host',
              default='127.0.0.1',
              help='IP address to listen on.'),
    cfg.PortOpt('port',
                default=9085,
                help='Port number to listen on.'),
]

test_opts = [
    cfg.BoolOpt('mock_ansible',
                default=True,
                help='Use a fake ansible-playbook command that replays canned '
                     'logs'),
    cfg.IntOpt('mock_replay_speed',
               default=10,
               help='Factor to speed up the replay of logs 1 = normal speed, '
                    '2 = double speed, etc.   0 = no pauses (max speed)'),
    cfg.BoolOpt('mock_config_processor',
                default=False,
                help='Use a fake config processor that immediately returns '
                     'true?'),
    cfg.IntOpt('mock_cmd_exit',
               default=0,
               help='Return value of this program'),
]

CONF = cfg.CONF
CONF.register_opts(main_opts)
CONF.register_opts(test_opts, 'testing')

# strip off config file processing args from sys.argv sys.argv
conf_args = []

while(len(sys.argv) > 1 and sys.argv[1] in ('--config-dir','--config-file')):
    conf_args.extend(sys.argv[1:3])
    del sys.argv[1:3]


# Load config files specified on the command line
CONF(conf_args)

cmd_name = ''

if len(sys.argv) > 0:
    cmd_name = os.path.basename(sys.argv[1])

# Config processor invocation
if len(sys.argv) > 2 and cmd_name.startswith('python') and \
   'config-processor' in sys.argv[2]:

    if CONF.testing.mock_config_processor:

        for pos, arg in enumerate(sys.argv):
            if arg == '-c':
                cloud_config = sys.argv[pos + 1]

            if arg == '-o':
                out_topdir = sys.argv[pos + 1]

        # Do the minimal amount of work to fake the config processor: create
        # a dir with the proper name into the output dir
        try:
            import yaml

            with open(cloud_config, 'r') as f:
                data = yaml.load(f)
            cloud_name = data['cloud']['name']

        except ImportError:

            # Use regex parsing if yaml lib not available
            with open(cloud_config, 'r') as f:
                lines = f.readlines()

            pattern = re.compile(r'^\s*name:\s*(\S+)')
            for line in lines:
                match = re.search(pattern, line)
                if match:
                    cloud_name = match.group(1)
                    break

        outdir = os.path.join(out_topdir, cloud_name, '2.0', 'stage', 'info')
        os.makedirs(outdir)

    else:
        try:
            subprocess.check_output(sys.argv[1:], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            print e.output
            sys.exit(e.returncode)

elif cmd_name == 'ansible-playbook':

    if CONF.testing.mock_ansible:
        replay_speed = float(CONF.testing.mock_replay_speed)

        play_id = os.environ.get('PLAY_ID', 0)

        for arg in sys.argv:
            if arg.endswith(".yml"):
                playbook = os.path.basename(arg)
                break

        log = os.path.normpath(os.path.join(os.path.dirname(__file__),
                               playbook.replace('yml', 'log')))

        with open(log) as f:
            lines = f.readlines()

        last_time = 0
        pattern = re.compile(r'^\$\$(\w+): (.*)')
        for line in lines:
            match = re.search(pattern, line)
            if match:
                if match.group(1) == "EVENT":
                    (event, name) = match.group(2).split(' ')
                    host = CONF.host
                    if host == '0.0.0.0':
                        host = '127.0.0.1'
                    port = str(CONF.port)
                    url = 'http://%s:%s/api/v2/listener/playbook' % \
                        (host, port)
                    payload = {'play_id': play_id,
                               'playbook': name,
                               'event': event}
                    requests.post(url, json=payload)
                else:
                    next_time = int(match.group(1))
                    if last_time > 0 and replay_speed > 0:
                        naptime = (next_time - last_time) / \
                                  (replay_speed * 1000.0)
                        time.sleep(naptime)
                    last_time = next_time

                    print match.group(2)

                    # For debugging crosstalk between events and logs, it
                    # can be useful to prefix the log entry with the
                    # playbook name
                    # print playbook, match.group(2)
            else:
                print line,
                # print playbook, line, # (See above comment)

    else:
        try:
            subprocess.check_output(sys.argv[1:], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            print e.output
            sys.exit(e.returncode)

exit_code = CONF.testing.mock_cmd_exit

if exit_code != 0:
    sys.exit(exit_code)
